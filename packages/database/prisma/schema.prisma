// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model User {
  id                String       @id @default(uuid())
  firstName         String
  lastName          String
  email             String       @unique
  emailVerified     DateTime?
  password          String
  schoolId          Int          @unique
  ownedAssignments  Assignment[]
  ownedCourses      Course[]
  enrollments       Enrollment[]
  submissions       Submission[] @relation(name: "SubmittedBy")
  submissionsGraded Submission[] @relation(name: "GradedBy")
  comments          Comment[]
}

model Course {
  id          String       @id @default(uuid())
  owner       User         @relation(fields: [ownerId], references: [id])
  ownerId     String
  name        String
  description String
  enrollments Enrollment[]
  assignments Assignment[]
  submissions Submission[]
  comments    Comment[]
}

model Enrollment {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  userId   String
  role     Role
}

model Assignment {
  id            String       @id @default(uuid())
  course        Course       @relation(fields: [courseId], references: [id])
  assignedBy    User         @relation(fields: [assignedById], references: [id])
  assignedById  String
  courseId      String
  title         String
  description   String
  dueDate       DateTime
  openUntilDate DateTime
  isOpen        Boolean
  submissions   Submission[]
}

model Submission {
  id           String     @id @default(uuid())
  submitter    User       @relation(name: "SubmittedBy", fields: [submitterId], references: [id])
  gradedBy     User?      @relation(name: "GradedBy", fields: [gradedById], references: [id])
  course       Course     @relation(fields: [courseId], references: [id])
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  submitterId  String
  gradedById   String?
  courseId     String
  assignmentId String
  submittedAt  DateTime
  isLate       Boolean
  grade        Grade[]
  comments     Comment[]
}

model Comment {
  id           String     @id @default(uuid())
  commentor    User       @relation(fields: [commentorId], references: [id])
  submission   Submission @relation(fields: [submissionId], references: [id])
  course       Course     @relation(fields: [courseId], references: [id])
  commentorId  String
  submissionId String
  courseId     String
  content      String
}

model Grade {
  id           String     @id @default(uuid())
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String
  numberGrade  Float
  visible      Boolean
}

enum Role {
  STUDENT
  INSTRUCTOR
  TA
  ADMIN
}
