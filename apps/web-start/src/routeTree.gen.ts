/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeRouteRouteImport } from './routes/home/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CoursesCourseIdRouteRouteImport } from './routes/courses/$courseId/route'
import { Route as HomeMessagesIndexRouteImport } from './routes/home/messages/index'
import { Route as HomeHelpIndexRouteImport } from './routes/home/help/index'
import { Route as HomeDashboardIndexRouteImport } from './routes/home/dashboard/index'
import { Route as HomeCalendarIndexRouteImport } from './routes/home/calendar/index'
import { Route as CoursesCourseIdCourseHomeIndexRouteImport } from './routes/courses/$courseId/course-home/index'
import { Route as CoursesCourseIdAssignmentsIndexRouteImport } from './routes/courses/$courseId/assignments/index'

const HomeRouteRoute = HomeRouteRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesCourseIdRouteRoute = CoursesCourseIdRouteRouteImport.update({
  id: '/courses/$courseId',
  path: '/courses/$courseId',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeMessagesIndexRoute = HomeMessagesIndexRouteImport.update({
  id: '/messages/',
  path: '/messages/',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeHelpIndexRoute = HomeHelpIndexRouteImport.update({
  id: '/help/',
  path: '/help/',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeDashboardIndexRoute = HomeDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeCalendarIndexRoute = HomeCalendarIndexRouteImport.update({
  id: '/calendar/',
  path: '/calendar/',
  getParentRoute: () => HomeRouteRoute,
} as any)
const CoursesCourseIdCourseHomeIndexRoute =
  CoursesCourseIdCourseHomeIndexRouteImport.update({
    id: '/course-home/',
    path: '/course-home/',
    getParentRoute: () => CoursesCourseIdRouteRoute,
  } as any)
const CoursesCourseIdAssignmentsIndexRoute =
  CoursesCourseIdAssignmentsIndexRouteImport.update({
    id: '/assignments/',
    path: '/assignments/',
    getParentRoute: () => CoursesCourseIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRouteRouteWithChildren
  '/courses/$courseId': typeof CoursesCourseIdRouteRouteWithChildren
  '/home/calendar': typeof HomeCalendarIndexRoute
  '/home/dashboard': typeof HomeDashboardIndexRoute
  '/home/help': typeof HomeHelpIndexRoute
  '/home/messages': typeof HomeMessagesIndexRoute
  '/courses/$courseId/assignments': typeof CoursesCourseIdAssignmentsIndexRoute
  '/courses/$courseId/course-home': typeof CoursesCourseIdCourseHomeIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRouteRouteWithChildren
  '/courses/$courseId': typeof CoursesCourseIdRouteRouteWithChildren
  '/home/calendar': typeof HomeCalendarIndexRoute
  '/home/dashboard': typeof HomeDashboardIndexRoute
  '/home/help': typeof HomeHelpIndexRoute
  '/home/messages': typeof HomeMessagesIndexRoute
  '/courses/$courseId/assignments': typeof CoursesCourseIdAssignmentsIndexRoute
  '/courses/$courseId/course-home': typeof CoursesCourseIdCourseHomeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRouteRouteWithChildren
  '/courses/$courseId': typeof CoursesCourseIdRouteRouteWithChildren
  '/home/calendar/': typeof HomeCalendarIndexRoute
  '/home/dashboard/': typeof HomeDashboardIndexRoute
  '/home/help/': typeof HomeHelpIndexRoute
  '/home/messages/': typeof HomeMessagesIndexRoute
  '/courses/$courseId/assignments/': typeof CoursesCourseIdAssignmentsIndexRoute
  '/courses/$courseId/course-home/': typeof CoursesCourseIdCourseHomeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/courses/$courseId'
    | '/home/calendar'
    | '/home/dashboard'
    | '/home/help'
    | '/home/messages'
    | '/courses/$courseId/assignments'
    | '/courses/$courseId/course-home'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/courses/$courseId'
    | '/home/calendar'
    | '/home/dashboard'
    | '/home/help'
    | '/home/messages'
    | '/courses/$courseId/assignments'
    | '/courses/$courseId/course-home'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/courses/$courseId'
    | '/home/calendar/'
    | '/home/dashboard/'
    | '/home/help/'
    | '/home/messages/'
    | '/courses/$courseId/assignments/'
    | '/courses/$courseId/course-home/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRouteRoute: typeof HomeRouteRouteWithChildren
  CoursesCourseIdRouteRoute: typeof CoursesCourseIdRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/$courseId': {
      id: '/courses/$courseId'
      path: '/courses/$courseId'
      fullPath: '/courses/$courseId'
      preLoaderRoute: typeof CoursesCourseIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/messages/': {
      id: '/home/messages/'
      path: '/messages'
      fullPath: '/home/messages'
      preLoaderRoute: typeof HomeMessagesIndexRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/help/': {
      id: '/home/help/'
      path: '/help'
      fullPath: '/home/help'
      preLoaderRoute: typeof HomeHelpIndexRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/dashboard/': {
      id: '/home/dashboard/'
      path: '/dashboard'
      fullPath: '/home/dashboard'
      preLoaderRoute: typeof HomeDashboardIndexRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/calendar/': {
      id: '/home/calendar/'
      path: '/calendar'
      fullPath: '/home/calendar'
      preLoaderRoute: typeof HomeCalendarIndexRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/courses/$courseId/course-home/': {
      id: '/courses/$courseId/course-home/'
      path: '/course-home'
      fullPath: '/courses/$courseId/course-home'
      preLoaderRoute: typeof CoursesCourseIdCourseHomeIndexRouteImport
      parentRoute: typeof CoursesCourseIdRouteRoute
    }
    '/courses/$courseId/assignments/': {
      id: '/courses/$courseId/assignments/'
      path: '/assignments'
      fullPath: '/courses/$courseId/assignments'
      preLoaderRoute: typeof CoursesCourseIdAssignmentsIndexRouteImport
      parentRoute: typeof CoursesCourseIdRouteRoute
    }
  }
}

interface HomeRouteRouteChildren {
  HomeCalendarIndexRoute: typeof HomeCalendarIndexRoute
  HomeDashboardIndexRoute: typeof HomeDashboardIndexRoute
  HomeHelpIndexRoute: typeof HomeHelpIndexRoute
  HomeMessagesIndexRoute: typeof HomeMessagesIndexRoute
}

const HomeRouteRouteChildren: HomeRouteRouteChildren = {
  HomeCalendarIndexRoute: HomeCalendarIndexRoute,
  HomeDashboardIndexRoute: HomeDashboardIndexRoute,
  HomeHelpIndexRoute: HomeHelpIndexRoute,
  HomeMessagesIndexRoute: HomeMessagesIndexRoute,
}

const HomeRouteRouteWithChildren = HomeRouteRoute._addFileChildren(
  HomeRouteRouteChildren,
)

interface CoursesCourseIdRouteRouteChildren {
  CoursesCourseIdAssignmentsIndexRoute: typeof CoursesCourseIdAssignmentsIndexRoute
  CoursesCourseIdCourseHomeIndexRoute: typeof CoursesCourseIdCourseHomeIndexRoute
}

const CoursesCourseIdRouteRouteChildren: CoursesCourseIdRouteRouteChildren = {
  CoursesCourseIdAssignmentsIndexRoute: CoursesCourseIdAssignmentsIndexRoute,
  CoursesCourseIdCourseHomeIndexRoute: CoursesCourseIdCourseHomeIndexRoute,
}

const CoursesCourseIdRouteRouteWithChildren =
  CoursesCourseIdRouteRoute._addFileChildren(CoursesCourseIdRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRouteRoute: HomeRouteRouteWithChildren,
  CoursesCourseIdRouteRoute: CoursesCourseIdRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
